- name: Copy templates
  template:
    src: "templates/{{ item.src }}"
    dest: "{{ path }}/{{ item.dest }}"
  loop:
    - { src: 'main.tf.j2', dest: 'main.tf' }
    - { src: 'vars.tf.j2', dest: 'vars.tf' }
    - { src: 'output.tf.j2', dest: 'output.tf' }
 
- name: Check old .terraform exist
  stat:
    path: "{{ path }}/.terraform"
  register: old_terraform_directory

- name: Remove .terraform
  shell: "rm -rf terr* .terr*"
  args:
    chdir: "{{ path }}"
  when: old_terraform_directory.stat.exists

- name: Check new .terraform exist
  stat:
    path: "{{ path }}/.terraform"
  register: terraform_directory

- name: Terraform init
  shell: "terraform init"
  args:
    chdir: "{{ path }}"
  when: not terraform_directory.stat.exists

- name: Terraform apply
  shell: "terraform apply -auto-approve" 
  args:
    chdir: "{{ path }}"
  register: result

- name: Extract master IP addresses
  set_fact:
    check_ip: "{{ result.stdout | regex_search('(?<=master_ip = \")\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?=\")', multiline=False) }}"
    master_mac: "{{ result.stdout | regex_search('(?<=master_mac = \")([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})(?=\")', multiline=False) }}"
    bastion_ip: "{{ result.stdout | regex_search('(?<=bastion_ip = \")\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?=\")', multiline=False) }}"

- name: Print master IP
  debug:
    var: check_ip

- name: Print master MAC
  debug:
    var: master_mac

- name: Print bastion IP
  debug:
    var: bastion_ip