- name: Copy templates
  template:
    src: "templates/{{ item.src }}"
    dest: "clone_vm/{{ item.dest }}"
  loop:
    - { src: 'main.tf.j2', dest: 'main.tf' }
    - { src: 'vars.tf.j2', dest: 'vars.tf' }
    - { src: 'output.tf.j2', dest: 'output.tf' }
 
- name: Check .terraform exist
  stat:
    path: "{{ path }}/.terraform"
  register: terraform_directory

- name: Terraform init
  shell: "cd {{ path }}; terraform init"
  when: not terraform_directory.stat.exists

- name: Terraform apply
  shell: "cd {{ path }}; terraform apply -auto-approve -parallelism=1" 
  register: result

- name: Extract master IP addresses
  set_fact:
    master_ip_addresses: "{{ result.stdout | regex_search('(?<=master = \")\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?=\")', multiline=False) }}"

- name: Extract worker IP addresses
  set_fact:
    worker_ip_addresses: "{{ worker_ip_addresses | default([]) + [result.stdout | regex_search('(?<=worker' + worker_index|string + ' = \")\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(?=\")', multiline=False)] }}"
  vars:
    worker_index: "{{ item }}"
  loop: "{{ range(1, input_worker_count|int + 1) | list }}"
  loop_control:
    loop_var: worker_index

- name: Debug master_ip_addresses and worker_ip_addresses
  debug:
    var: master_ip_addresses

- name: Debug worker_ip_addresses
  debug:
    var: worker_ip_addresses